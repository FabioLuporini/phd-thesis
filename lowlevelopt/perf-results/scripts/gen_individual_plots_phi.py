"""
Generate a grid of plots given raw data generated by pybench 
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import Grid
import brewer2mpl
from mpltools import style

from stackedBarGraph import StackedBarGrapher
SBG = StackedBarGrapher()

import os
import sys
from collections import defaultdict

# Graph parameters:
style.use('ggplot')
d_labels = ["q=1", "q=2", "q=3", "q=4"]
d_colors = brewer2mpl.get_map('Paired', 'qualitative', 4).hex_colors
d_widths = [0.9, 0.9, 0.9, 0.9]
fontsize = 15

# DATA
# Format of np.array: [licm, ap, opvect, split]
# Gain_in_licm_ap * normalized_gain (from txt) - Gain_in_licm_ap
plots = []
# Helmholtz 2D
plots.append(('Helmholtz', 'Triangle', np.array([[1.49, 0.01, 0., 0.],
                                                 [1.06, 1.35, 0., 0.],
                                                 [1.05, 1.25, 0., 0.],
                                                 [1.17, 0.79, 0., 0.]])))
# Diffusion 2D
plots.append(('Diffusion', 'Triangle', np.array([[1.07, 0.01, 0., 0.],
                                                 [1.06, 0.82, 0., 0.],
                                                 [1.18, 0.02, 0.11, 0.],
                                                 [1.16, 0.81, 0.29, 0.]])))
# Burgers 2D
plots.append(('Burgers', 'Triangle', np.array([[1.21, 1.63, 0., 0.00],
                                               [1.42, 0.84, 0., 0.00],
                                               [2.34, 1.62, 0., 0.32],
                                               [2.97, 1.30, 0., 0.38]])))
# Helmholtz 3D
plots.append(('Helmholtz', 'Tetrahedron', np.array([[1.28, 0.13, 0.00, 0.],
                                                    [1.29, 0.21, 0.00, 0.],
                                                    [2.05, 0.74, 0.18, 0.],
                                                    [1.73, 1.08, 1.20, 0.]])))
# Diffusion 3D
plots.append(('Diffusion', 'Tetrahedron', np.array([[1.00, 0.05, 0.00, 0.],
                                                    [1.38, 0.13, 0.14, 0.],
                                                    [2.02, 0.74, 0.80, 0.],
                                                    [1.74, 1.26, 0.97, 0.]])))
# Burgers 3D
plots.append(('Burgers', 'Tetrahedron', np.array([[1.01, 0.47, 0., 0.06],
                                                  [2.55, 1.33, 0., 0.11],
                                                  [0.98, 0.57, 0., 0.10],
                                                  [1.21, 0.08, 0., 0.03]])))
# Helmholtz XTR
plots.append(('Helmholtz', 'Prism', np.array([[1.04, 1.34, 0.00, 0.],
                                              [2.26, 0.21, 0.15, 0.],
                                              [1.93, 0.22, 0.54, 0.],
                                              [1.64, 0.07, 0.25, 0.]])))
# Diffusion XTR
plots.append(('Diffusion', 'Prism', np.array([[1.11, 1.30, 0.00, 0.],
                                              [2.16, 0.36, 0.83, 0.],
                                              [1.85, 0.20, 0.58, 0.],
                                              [2.83, 0.00, 0.29, 0.]])))
# Burgers XTR
plots.append(('Burgers', 'Prism', np.array([[1.39, 0.79, 0., 0.23],
                                            [1.56, 1.26, 0., 0.11],
                                            [1.18, 0.06, 0., 0.00],
                                            [1.04, 0.21, 0., 0.01]])))


fig = plt.figure()
grid = Grid(fig, rect=111, nrows_ncols=(3, 3), axes_pad=0.3, label_mode='L')
for ax, info in zip(grid, enumerate(plots)):
    loc, info = info
    equation, element, values = info

    if loc in [0, 3, 6]:
        yTicks=[[0.0, 1.0, 2.0, 3.0, 4.0],
                [0.0, 1.0, 2.0, 3.0, 4.0]]
    else:
        yTicks = None

    if loc in [6, 7, 8]:
        xLabels = d_labels
    else:
        xLabels = None

    drawn_bars = SBG.stackedBarPlot(ax, 
                                    values,
                                    d_colors,
                                    widths=d_widths,
                                    yTicks=yTicks,
                                    xLabels=xLabels,
                                    gap=0.6)
    
    # Plot
    ax.set_title(equation, fontsize=fontsize)
    ax.set_ylabel(element, fontsize=fontsize, color='black')
    ax.grid(axis='x')
    ax.axhline(y=1, color='black', linestyle='--', linewidth=0.75)
    ax.set_ylim(0.0, 4.5)
    if loc >= 3:
        ax.title.set_visible(False)

plt.legend(drawn_bars, ['licm', 'ap', 'opvect', 'split'],
            bbox_to_anchor=(-1.72, -1.00, 1.5, 0.85), fancybox=True, ncol=4, prop={'size':8})

plt.tight_layout()
plt.show()
plt.close(fig)
del fig
