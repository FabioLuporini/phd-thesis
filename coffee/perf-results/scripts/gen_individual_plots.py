"""
Generate a grid of plots given raw data generated by pybench 
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import Grid
import brewer2mpl
from mpltools import style

from stackedBarGraph import StackedBarGrapher
SBG = StackedBarGrapher()

import os
import sys
from collections import defaultdict

# Graph parameters:
style.use('ggplot')
d_labels = ["q=1", "q=2", "q=3", "q=4"]
d_colors = brewer2mpl.get_map('Paired', 'qualitative', 4).hex_colors
d_widths = [0.9, 0.9, 0.9, 0.9]
fontsize = 15

# DATA
# Format of np.array: [licm, ap, opvect, split]
plots = []
# Helmholtz 2D
plots.append(('Helmholtz', 'Triangle', np.array([[1.05, 0.27, 0., 0.],
                                                 [1.46, 0.42, 0., 0.],
                                                 [1.68, 1.18, 0., 0.],
                                                 [1.67, 2.46, 0., 0.]])))
# Diffusion 2D
plots.append(('Diffusion', 'Triangle', np.array([[1.09, 0.28, 0., 0.],
                                                 [1.67, 0.30, 0., 0.],
                                                 [1.96, 1.10, 0., 0.],
                                                 [1.64, 2.64, 0., 0.]])))
# Burgers 2D
plots.append(('Burgers', 'Triangle', np.array([[1.53, 0.03, 0., 0.15],
                                               [1.80, 0.47, 0., 0.14],
                                               [2.68, 0.00, 0., 0.04],
                                               [2.46, 0.31, 0., 0.30]])))
# Helmholtz 3D
plots.append(('Helmholtz', 'Tetrahedron', np.array([[1.36, 0.00, 0.12, 0.],
                                                    [2.10, 1.22, 0.00, 0.],
                                                    [2.64, 0.02, 0.07, 0.],
                                                    [2.26, 1.00, 0.37, 0.]])))
# Diffusion 3D
plots.append(('Diffusion', 'Tetrahedron', np.array([[1.30, 0.12, 0.07, 0.],
                                                    [2.20, 1.50, 0.00, 0.],
                                                    [3.11, 0.67, 0.07, 0.],
                                                    [2.60, 1.22, 0.62, 0.]])))
# Burgers 3D
plots.append(('Burgers', 'Tetrahedron', np.array([[1.61, 0.00, 0., 0.14],
                                                  [2.24, 0.00, 0., 0.63],
                                                  [1.69, 0.00, 0., 0.26],
                                                  [1.59, 0.19, 0., 0.14]])))
# Helmholtz XTR
plots.append(('Helmholtz', 'Prism', np.array([[2.16, 0.48, 0.02, 0.],
                                              [2.27, 0.46, 0.19, 0.],
                                              [2.45, 0.00, 0.20, 0.],
                                              [2.06, 0.70, 0.66, 0.]])))
# Diffusion XTR
plots.append(('Diffusion', 'Prism', np.array([[2.16, 0.40, 0.03, 0.],
                                              [1.81, 1.31, 0.08, 0.],
                                              [2.71, 0.03, 0.48, 0.],
                                              [2.32, 0.36, 1.10, 0.]])))
# Burgers XTR
plots.append(('Burgers', 'Prism', np.array([[2.11, 0.08, 0., 0.66],
                                            [2.22, 0.11, 0., 0.50],
                                            [1.66, 0.00, 0., 0.27],
                                            [1.32, 0.10, 0., 0.71]])))


fig = plt.figure()
grid = Grid(fig, rect=111, nrows_ncols=(3, 3), axes_pad=0.3, label_mode='L')
for ax, info in zip(grid, enumerate(plots)):
    loc, info = info
    equation, element, values = info

    if loc in [0, 3, 6]:
        yTicks=[[0.0, 1.0, 2.0, 3.0, 4.0],
                [0.0, 1.0, 2.0, 3.0, 4.0]]
    else:
        yTicks = None

    if loc in [6, 7, 8]:
        xLabels = d_labels
    else:
        xLabels = None

    drawn_bars = SBG.stackedBarPlot(ax, 
                                    values,
                                    d_colors,
                                    widths=d_widths,
                                    yTicks=yTicks,
                                    xLabels=xLabels,
                                    gap=0.6)
    
    # Plot
    ax.set_title(equation, fontsize=fontsize)
    ax.set_ylabel(element, fontsize=fontsize, color='black')
    ax.grid(axis='x')
    ax.axhline(y=1, color='black', linestyle='--', linewidth=0.75)
    ax.set_ylim(0.0, 4.5)
    if loc >= 3:
        ax.title.set_visible(False)

plt.legend(drawn_bars, ['licm', 'ap', 'opvect', 'split'],
            bbox_to_anchor=(-1.72, -1.00, 1.5, 0.85), fancybox=True, ncol=4, prop={'size':8})

plt.tight_layout()
plt.show()
plt.close(fig)
del fig
